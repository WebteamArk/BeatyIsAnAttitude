<?php

function biamod_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item) {
  if (isset($field_collection_item->field_youtube[LANGUAGE_NONE][0])) {
    $val = trim($field_collection_item->field_youtube[LANGUAGE_NONE][0]['value']);
    
    $leads = array(
    	'watch?v=',
      'youtu.be/',
      'embed/',
    );
    
    $ends = array('&','?','%',' ');
    
    foreach ($leads as $lead) {
      if (strpos($val, $lead) !== false) {
        $val = substr($val, strpos($val, $lead) + strlen($lead));
      }
    }
    
    foreach ($ends as $end) {
      if (strpos($val, $end) !== false) {
        $val = substr($val, 0, strpos($val, $end));
      }
    }
    
    $field_collection_item->field_youtube[LANGUAGE_NONE][0]['value'] = $val;
    
    
    
    /* if (!isset($field_collection_item->field_zdjecie[LANGUAGE_NONE][0])) {
      
      $image = file_get_contents('http://img.youtube.com/vi/'.$val.'/0.jpg'); // string
      $file = file_save_data($image, 'public://youtube_'.transliteration_clean_filename($val).'.png',FILE_EXISTS_REPLACE);
      $info = image_get_info($file->uri);
      
      $image = array(
      	'title'=>'',
        'fid' => $file->fid,
        'display' => '1',
        'width' => $info['width'],
        'height' => $info['height'],
        'description' => '',
        'upload' => '',
        'alt' => '',
      );
      $field_collection_item->field_zdjecie[LANGUAGE_NONE][0] = $image;
    } */
  }
}

function biamod_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'commerce_product_ui_product_form' && isset($form['field_nailiner_type'])) {
    unset($form['field_nailiner_type']);
  }
  
  if($form_id == 'commerce_product_ui_product_form' && isset($form['field_composition_type_reference'])) {
    unset($form['field_composition_type_reference']);
  }
  
  if ($form_id == 'i18n_string_translate_page_form') {
    // Loop all strings.
    foreach ( $form ['strings'] ['all'] as $name => $field ) {
      // The field for [ block title / vocabulary name / vocabulary description / term name ] are textfields in ori language,
      // but textareas when translating: change these to textfields.
      if (preg_match ( '/blocks:block:[0-9]+:title/i', $name ) || preg_match ( '/taxonomy:(vocabulary|term):[0-9]+:name/i', $name ) || preg_match ( '/taxonomy:vocabulary:[0-9]+:description/i', $name )) {
        $form ['strings'] ['all'] [$name] ['#type'] = 'textfield';
      }      // Change textarea to text_format and overwrite description which is already auto included in text_format fields.
      elseif (preg_match ( '/blocks:block:[0-9]+:body/i', $name ) || preg_match ( '/taxonomy:term:[0-9]+:description/i', $name )) {
        $form ['strings'] ['all'] [$name] ['#type'] = 'text_format';
        $form ['strings'] ['all'] [$name] ['#description'] = '';
      }
    }
  
    // Add submit function.
    $form ['#submit'] = array_merge ( array (
        '_biamod_form_submit'
    ), $form ['#submit'] );
  }
}

function biamod_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'commerce_product' && ($entity_form['#entity']->type == 'nailiners' || $entity_form['#entity']->type == 'gel') && isset($entity_form['field_nailiner_type'])) {
    unset($entity_form['field_nailiner_type']);
  }
  
  if ($entity_form['#entity_type'] == 'commerce_product' && $entity_form['#entity']->type == 'nailiners' && isset($entity_form['field_composition_type_reference'])) {
    unset($entity_form['field_composition_type_reference']);
  }
}

function biamod_entity_presave($entity, $type) {
  if ($type == 'commerce_product' && ($entity->type == 'nailiners' || $entity->type == 'gel') ) {
    $entity->field_nailiner_type[LANGUAGE_NONE] = array();
    foreach ($entity->field_nailiner_type_taxonomy[LANGUAGE_NONE] as $id => $term) {
      $entity->field_nailiner_type[LANGUAGE_NONE][$id] = array('target_id'=>$term['tid']);
    }
  }
  
  if ($type == 'commerce_product' && $entity->type == 'nailiners' ) {
    $entity->field_composition_type_reference[LANGUAGE_NONE] = array();
    foreach ($entity->field_composition_type[LANGUAGE_NONE] as $id => $term) {
      $entity->field_composition_type_reference[LANGUAGE_NONE][$id] = array('target_id'=>$term['tid']);
    }
  }

  if ($type == 'node' && $entity->type == 'instagram_image') {
    
    if (isset($entity->field_image_src_path[LANGUAGE_NONE][0]['url']) && !isset($entity->field_image[LANGUAGE_NONE][0])) {
      $external = $entity->field_image_src_path[LANGUAGE_NONE][0]['url'];
      $path_array = explode("?",$external);
      $path = array_shift($path_array);
      $filename = basename($path);
      $image = file_get_contents($external);
      $file = file_save_data($image, 'public://instagram/' . $filename, FILE_EXISTS_RENAME);
      $entity->field_image = array(LANGUAGE_NONE => array('0' => (array)$file));
    }
  }
}

function biamod_entity_update($entity, $type) {
  if ($type == 'commerce_product' && $entity->type == 'nailiners' ) {
    biamod_update_solo_nailiners($entity);
  }
}

function biamod_entity_insert($entity, $type) {
  if ($type == 'commerce_product' && $entity->type == 'nailiners' ) {
    biamod_update_solo_nailiners($entity);
  }
}

function biamod_update_solo_nailiners($entity) {
  if (!isset($entity->field_products_solonail[LANGUAGE_NONE][0]) || 
      $entity->field_solo_bundle[LANGUAGE_NONE][0]['value'] == 'solo' && count($entity->field_products_solonail[LANGUAGE_NONE]) != 1 ||
      $entity->field_solo_bundle[LANGUAGE_NONE][0]['value'] == 'solo' && $entity->field_products_solonail[LANGUAGE_NONE][0]['target_id'] != $entity->product_id) {
    $entity->field_products_solonail[LANGUAGE_NONE] = array('0'=>array('target_id'=>$entity->product_id));
    commerce_product_save($entity);
  }
}

function _biamod_form_submit($form, &$form_state) {
  // Remove wysiwyg format because i18n cant handle it.
  foreach ( $form_state ['values'] ['strings'] as $name => $field ) {
    if (preg_match ( '/blocks:block:[0-9]+:body/i', $name ) || preg_match ( '/taxonomy:term:[0-9]+:description/i', $name )) {
      unset ( $form_state ['values'] ['strings'] [$name] ['format'] );
    }
  }
}

function biamod_slick_attach_load_info_alter(&$load, $attach, $skins, $settings) {
  $slick_path = drupal_get_path('module', 'slick');
  $min = $slick_path . '/js/slick.load.min.js';
  $dev = $slick_path . '/js/slick.load.js';

  if (1) {
    // Switch to the non-minified version of the slick.load.min.js.
    $load['js'] += array(
        $dev => array('group' => JS_DEFAULT, 'weight' => 0),
    );
    if (isset($load['js'][$min])) {
      unset($load['js'][$min]);
    }
  }
}






















